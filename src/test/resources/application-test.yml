server:
  port: ${SERVER_PORT}

spring:
  rabbitmq:
    host: ${RABBITMQ_BROKER}
    port: ${RABBITMQ_PORT} # RabbitMQ SSL port
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST}
    ssl:
      enabled: true

  data:
    redis:
      host: localhost # ${REDIS_DOMAIN} # 로컬에서 할 때는 localhost
      port: ${REDIS_PORT}

  activemq:
    broker-url: ${ACTIVEMQ_BROKER}
    user: ${ACTIVEMQ_USER}
    password: ${ACTIVEMQ_PASSWORD}
    close-timeout: 10s
    packages:
      trust-all: true

  datasource:
    url: jdbc:mariadb://${DB_URL}/itsmine
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver

  # 로컬용
  #   datasource:
  #     url: jdbc:mysql://${DB_URL}/itsmine
  #     username: ${DB_USER}
  #     password: ${DB_PASSWORD}
  #     driver-class-name: com.mysql.cj.jdbc.Driver

  sql:
    init:
      encoding: UTF-8

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        ddl-auto: update
      properties:
        hibernate:
          show_sql: true
          format_sql: true
          connection:
            CharSet: utf-8
            characterEncoding: utf-8
          useUnicode: true


web:
  resources:
    static-locations: classpath:/static/

thymeleaf:
  suffix: .html
  prefix: classpath:templates/

profiles:
  include:
    - aws

main:
  allow-bean-definition-overriding: true

jwt-secret-key: ${JWT_KEY}

admin-token: ${ADMIN_TOKEN}

cloud:
  aws:
    s3:
      bucket: ${CLOUD_AWS_S3_BUCKET}
      domain: ${CLOUD_AWS_S3_DOMAIN}
    stack:
      auto: false
    region:
      static: ${CLOUD_AWS_REGION_STATIC}
    credentials:
      accessKey: ${CLOUD_AWS_CREDENTIALS_ACCESSKEY}
      secretKey: ${CLOUD_AWS_CREDENTIALS_SECRETKEY}

dynamodb:
  table:
    name: Messages
  credentials:
    accessKey: ${CLOUD_AWS_DYNAMODB_ACCESSKEY}
    secretKey: ${CLOUD_AWS_DYNAMODB_SECRETKEY}


activemq:
  queue:
    name: ${ACTIVEMQ_QNAME}
  stomp-host: ${STOMP_HOST}
